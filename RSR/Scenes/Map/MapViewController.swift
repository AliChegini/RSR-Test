//
//  MapViewController.swift
//  RSR
//
//  Created by Ehsan on 06/03/2020.
//  Copyright (c) 2020 Ali C. All rights reserved.
//
//  This file was generated by Ali Chegini.
//  This is a simplified version of the Clean Swift Xcode Templates so
//  one can apply clean architecture to iOS and Mac projects.
//  For more info visit: http://clean-swift.com
//

import UIKit
import MapKit

protocol MapDisplayable: class {
    func displayCustomPin(viewModel: MapModels.LocateTheUser.ViewModel)
    func displayElementsForDeviceType(viewModel: MapModels.ShowElementsForDevice.ViewModel)
}

class MapViewController: UIViewController, MapDisplayable, MKMapViewDelegate {
    private lazy var interactor: MapBusinessLogic = MapInteractor(presenter: MapPresenter(viewController: self))
    private lazy var router = MapRouter(viewController: self)
    
    @IBOutlet weak var mapView: MKMapView!
    // ring button at the bottom of scene
    @IBOutlet weak var ringButton: UIButton!
    
    // cancel button at the top left corner of middle box
    @IBOutlet weak var cancelButton: UIButton!
    
    // middle yellow box containing labels and button
    @IBOutlet weak var middleBoxView: UIView!
    
    // ring button inside the middle box
    @IBOutlet weak var finalRingButton: UIButton!
    
    
    var pin: CustomAnnotation!
    
    var calloutElements = CustomCalloutViews()
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        roundTheButtons()
        mapView.delegate = self
        askPermission()
        locateUser()
        checkDeviceType()
    }
    
    
    fileprivate func askPermission() {
        let request = MapModels.AskForPermission.Request()
        interactor.askPermission(request: request)
    }
    
    fileprivate func locateUser() {
        let request = MapModels.LocateTheUser.Request()
        interactor.locateUser(request: request)
    }
    
    fileprivate func checkDeviceType() {
        let request = MapModels.ShowElementsForDevice.Request()
        interactor.checkDeviceType(request: request)
    }
    
    
    func displayCustomPin(viewModel: MapModels.LocateTheUser.ViewModel) {
        pin = CustomAnnotation(coordinate: viewModel.coordinate, title: viewModel.stringLocation)
        mapView.addAnnotation(pin)
        calloutElements.addressLabel.text = viewModel.stringLocation
        
        // Zooming on annotation
        let span = MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
        let region = MKCoordinateRegion(center: viewModel.coordinate, span: span)
        mapView.setRegion(region, animated: true)
        
        mapView.selectAnnotation(pin, animated: true)
    }
    
    
    func displayElementsForDeviceType(viewModel: MapModels.ShowElementsForDevice.ViewModel) {
        if viewModel.deviceType == .pad {
            ringButton.isHidden = true
        }
    }
    
    
    
    @IBAction func ringButtonAction(_ sender: UIButton) {
        hideCalloutAndRingButton()
        showMiddleBoxAndCancelButton()
    }
        
    @IBAction func cancelButtonAction(_ sender: UIButton) {
        showCalloutAndRingButton()
        hideMiddleBoxAndCancelButton()
    }
    
    @IBAction func finalRingButtonAction(_ sender: UIButton) {
        let number = "+319007788990"
        if let url = URL(string: "tel://\(number)"), UIApplication.shared.canOpenURL(url) {
            UIApplication.shared.open(url)
        }
    }
    
    
    // hide callout and button at the bottom of the page
    fileprivate func hideCalloutAndRingButton() {
        calloutElements.calloutView.isHidden = true
        ringButton.isHidden = true
    }
    
    // hide middle box and cancel button
    fileprivate func hideMiddleBoxAndCancelButton() {
        middleBoxView.isHidden = true
        cancelButton.isHidden = true
    }
    
    // show callout and button at the bottom of the page
    fileprivate func showCalloutAndRingButton() {
        UIView.transition(with: calloutElements.calloutView,
                          duration: 0.4,
                          options: .transitionCrossDissolve,
                          animations: {
            self.calloutElements.calloutView.isHidden = false
            self.ringButton.isHidden = false
        })
    }
    
    // show middle box and cancel button
    fileprivate func showMiddleBoxAndCancelButton() {
        UIView.transition(with: middleBoxView,
                          duration: 0.4,
                          options: .transitionCrossDissolve,
                          animations: {
            self.middleBoxView.isHidden = false
            self.cancelButton.isHidden = false
        })
    }
    

    // functionn to cut buttons corners
    fileprivate func roundTheButtons() {
        ringButton.layer.cornerRadius = 10
        finalRingButton.layer.cornerRadius = 10
    }
    
    
    // methods for Custom annotations
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let annotationView = MKAnnotationView(annotation: pin, reuseIdentifier: "UserLocation")
        annotationView.image = UIImage(named: "marker")
        annotationView.canShowCallout = false
        
        return annotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        calloutElements.setupViews(view: view)
    }
}
